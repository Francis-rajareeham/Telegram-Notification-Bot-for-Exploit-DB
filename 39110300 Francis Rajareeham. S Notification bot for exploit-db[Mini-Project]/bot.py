import json
import requests
import feedparser
import dbm
import re
from dataclasses import dataclass
import time

@dataclass
class Config:
    db_path: str
    feed_url: str
    telegram_token: str
    chat_id: int
    message_prefix: str

    @staticmethod
    def from_file(filename):
        d = json.load(open(filename))
        return Config(
            db_path=d['db_path'],
            feed_url=d['feed_url'],
            telegram_token=d['telegram_token'],
            chat_id=d['chat_id'],

while True:
    class NotificationBot:

        def __init__(self, config: Config):
            self.config = config
            self.db = dbm.open(config.db_path, 'c')

        def run(self):
            d = feedparser.parse(self.config.feed_url)
            for entry in d.entries[::-1]:
                self.notify(entry)

        def notify(self, entry):
            url = self.find_link(entry)
            if url in self.db:
                return

                message = self.prepare_message(url, entry)

            self.send_telegram_message(
                token=self.config.telegram_token,
                chat_id=self.config.chat_id,
                message=message)
            self.db[url] = "true"

        def prepare_message(self, url, entry):
            prefix = self.config.message_prefix
            title = entry.title
            return f'{prefix} "{title}" \n{url}'

        def send_telegram_message(self, token, chat_id, message):
            url = f'https://api.telegram.org/bot{token}/sendMessage'
            data = {'chat_id': chat_id, 'text': message}
            res = requests.post(url, data).json()
            if not res.get("ok"):
                raise Exception("Failed to send message to telegram: %s", res)

        def find_link(self, entry):
            return first(link['href'] for link in entry.links if link.type == "text/html")

    def first(seq):
        try:
            return next(iter(seq))
        except StopIteration:
            return None

    def main():
        config = Config.from_file("config.json")
        bot = NotificationBot(config)
        bot.run()

    if __name__ == "__main__":
        main()
    time.sleep(300)